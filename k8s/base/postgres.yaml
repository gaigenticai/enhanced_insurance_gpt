apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: insurance-ai
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: insurance-ai-system
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      containers:
      - name: postgres
        image: pgvector/pgvector:pg15
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_INITDB_ARGS
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_INITDB_ARGS
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
      - name: postgres-init
        configMap:
          name: postgres-init
          defaultMode: 0755
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "fast-ssd"
      resources:
        requests:
          storage: 50Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: insurance-ai
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: insurance-ai-system
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app.kubernetes.io/name: postgres
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: insurance-ai
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database-config
data:
  postgresql.conf: |
    # PostgreSQL Configuration for Insurance AI System
    
    # Connection Settings
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    superuser_reserved_connections = 3
    
    # Memory Settings
    shared_buffers = 256MB
    effective_cache_size = 1GB
    work_mem = 4MB
    maintenance_work_mem = 64MB
    
    # Checkpoint Settings
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    
    # Query Planner Settings
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Logging Settings
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_min_duration_statement = 1000
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_statement = 'ddl'
    
    # Security Settings
    ssl = on
    ssl_cert_file = 'server.crt'
    ssl_key_file = 'server.key'
    password_encryption = md5
    
    # Performance Settings
    shared_preload_libraries = 'pg_stat_statements'
    track_activity_query_size = 2048
    track_functions = all
    
    # Autovacuum Settings
    autovacuum = on
    autovacuum_max_workers = 3
    autovacuum_naptime = 1min
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
  namespace: insurance-ai
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database-init
data:
  01-init-database.sql: |
    -- Insurance AI System Database Initialization
    
    -- Create extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "btree_gin";
    
    -- Create schemas
    CREATE SCHEMA IF NOT EXISTS insurance_ai;
    CREATE SCHEMA IF NOT EXISTS audit;
    CREATE SCHEMA IF NOT EXISTS monitoring;
    
    -- Set default schema
    ALTER DATABASE insurance_ai_system SET search_path TO insurance_ai, public;
    
    -- Create roles
    CREATE ROLE insurance_readonly;
    CREATE ROLE insurance_readwrite;
    
    -- Grant permissions
    GRANT CONNECT ON DATABASE insurance_ai_system TO insurance_readonly;
    GRANT CONNECT ON DATABASE insurance_ai_system TO insurance_readwrite;
    GRANT USAGE ON SCHEMA insurance_ai TO insurance_readonly;
    GRANT USAGE ON SCHEMA insurance_ai TO insurance_readwrite;
    GRANT SELECT ON ALL TABLES IN SCHEMA insurance_ai TO insurance_readonly;
    GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA insurance_ai TO insurance_readwrite;
    
    -- Set default privileges
    ALTER DEFAULT PRIVILEGES IN SCHEMA insurance_ai GRANT SELECT ON TABLES TO insurance_readonly;
    ALTER DEFAULT PRIVILEGES IN SCHEMA insurance_ai GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO insurance_readwrite;
    
    -- Create monitoring user
    CREATE USER monitoring_user WITH PASSWORD 'monitoring_password';
    GRANT insurance_readonly TO monitoring_user;

